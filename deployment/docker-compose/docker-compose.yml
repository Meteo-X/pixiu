version: '3.8'

services:
  # Message Bus - Google Cloud Pub/Sub Emulator
  pubsub-emulator:
    image: gcr.io/google.com/cloudsdktool/cloud-sdk:latest
    container_name: pubsub-emulator
    ports:
      - "8085:8085"
    command: >
      bash -c "gcloud beta emulators pubsub start --host-port=0.0.0.0:8085 --verbosity=info"
    environment:
      - PUBSUB_EMULATOR_HOST=localhost:8085
      - GOOGLE_CLOUD_PROJECT=pixiu-trading
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Pub/Sub Admin UI (optional)
  pubsub-ui:
    image: gcr.io/google.com/cloudsdktool/cloud-sdk:latest
    container_name: pubsub-ui
    depends_on:
      - pubsub-emulator
    ports:
      - "8080:8080"
    environment:
      - PUBSUB_EMULATOR_HOST=pubsub-emulator:8085
      - GOOGLE_CLOUD_PROJECT=pixiu-trading
    command: >
      bash -c "echo 'Pub/Sub Emulator UI not available - use gcloud commands or client libraries to interact with topics'"

  # Databases
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: trading
      POSTGRES_PASSWORD: trading123
      POSTGRES_DB: trading_db
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts/postgres:/docker-entrypoint-initdb.d

  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: timescaledb
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: tsdb
      POSTGRES_PASSWORD: tsdb123
      POSTGRES_DB: market_data
    volumes:
      - timescale-data:/var/lib/postgresql/data
      - ./init-scripts/timescale:/docker-entrypoint-initdb.d

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redis123
    volumes:
      - redis-data:/data

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus-data:/prometheus

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards

  # Logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
    depends_on:
      - elasticsearch

  # Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: ":9411"

  # Development Tools
  adminer:
    image: adminer:latest
    container_name: adminer
    ports:
      - "8081:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres

volumes:
  postgres-data:
  timescale-data:
  redis-data:
  prometheus-data:
  grafana-data:
  elasticsearch-data:

networks:
  default:
    name: pixiu-network